From c2f54b8946db3facf36c5b59ea02be51e43a6ecf Mon Sep 17 00:00:00 2001
From: Julien Olivain <julien.olivain@lsv.ens-cachan.fr>
Date: Tue, 27 Jan 2015 22:41:56 +0100
Subject: [PATCH] volk: Fix volk_malloc() when alignment is 1

Addresses issue #692

Signed-off-by: Julien Olivain <julien.olivain@lsv.ens-cachan.fr>
---
 volk/lib/volk_malloc.c | 15 +++++++++++++--
 1 file changed, 13 insertions(+), 2 deletions(-)

diff --git a/volk/lib/volk_malloc.c b/volk/lib/volk_malloc.c
index d5e1709..b6e3b21 100644
--- a/volk/lib/volk_malloc.c
+++ b/volk/lib/volk_malloc.c
@@ -24,6 +24,7 @@
 #include <volk/volk_malloc.h>
 #include <stdio.h>
 #include <stdlib.h>
+#include <string.h>
 
 /*
  * For #defines used to determine support for allocation functions,
@@ -54,18 +55,28 @@
 //#else // _ISOC11_SOURCE
 
 // Otherwise, test if we are a POSIX or X/Open system
-// This only has a restriction that alignment be a power of 2.
+// This only has a restriction that alignment be a power of 2 and a
+// multiple of sizeof(void *).
 #if _POSIX_C_SOURCE >= 200112L || _XOPEN_SOURCE >= 600 || HAVE_POSIX_MEMALIGN
 
 void *volk_malloc(size_t size, size_t alignment)
 {
   void *ptr;
+
+  // quoting posix_memalign() man page:
+  // "alignment must be a power of two and a multiple of sizeof(void *)"
+  // volk_get_alignment() could return 1 for some machines (e.g. generic_orc)
+  if (alignment == 1)
+    return malloc(size);
+
   int err = posix_memalign(&ptr, alignment, size);
   if(err == 0) {
     return ptr;
   }
   else {
-    fprintf(stderr, "VOLK: Error allocating memory (posix_memalign: %d)\n", err);
+    fprintf(stderr,
+            "VOLK: Error allocating memory "
+            "(posix_memalign: error %d: %s)\n", err, strerror(err));
     return NULL;
   }
 }
-- 
2.1.0

